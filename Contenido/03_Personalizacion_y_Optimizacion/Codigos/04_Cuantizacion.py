import time

def pausar_y_continuar(mensaje="Presiona Enter para continuar..."):
    """Funci√≥n para pausar la ejecuci√≥n y esperar al usuario."""
    input(f"\n{mensaje}")
    print("-" * 60)

def obtener_numeros_del_usuario():
    """Pide al usuario que ingrese n√∫meros y los valida."""
    while True:
        entrada = input("‚û°Ô∏è Ingresa tus n√∫meros separados por espacios (ej: 3.14 -2.5 100): ")
        try:
            # Intenta convertir cada elemento ingresado en un n√∫mero flotante.
            numeros = [float(n) for n in entrada.split()]
            if not numeros: # Si la lista est√° vac√≠a
                print("‚ùå Error: No ingresaste ning√∫n n√∫mero. Int√©ntalo de nuevo.")
                continue
            return numeros
        except ValueError:
            # Si la conversi√≥n falla, es porque hay un valor no num√©rico.
            print("‚ùå Error: Aseg√∫rate de ingresar solo n√∫meros separados por espacios.")

def cuantizar_paso_a_paso(lista_numeros, tipo):
    """
    Funci√≥n interactiva que gu√≠a al usuario a trav√©s de la cuantizaci√≥n
    sim√©trica o asim√©trica, explicando cada c√°lculo.
    """
    if tipo == 'simetrico':
        print("\n" + "="*60)
        print("üîµ TUTORIAL: CUANTIZACI√ìN SIM√âTRICA (a int8)")
        print("="*60)
        print("Este m√©todo centra el mapa en el cero. Ideal para datos balanceados.")
        
        pausar_y_continuar("Presiona Enter para encontrar el rango...")
        
        # --- PASO 1: CALCULAR RANGO ---
        max_absoluto = max(abs(n) for n in lista_numeros)
        print(f"PASO 1: Encontrar el valor m√°s lejano del cero (m√°ximo absoluto).")
        print(f"   - El valor m√°s lejano es: {max_absoluto:.4f}")
        print(f"   - Por lo tanto, nuestro 'mapa' ir√° de {-max_absoluto:.4f} a +{max_absoluto:.4f}")
        
        pausar_y_continuar("Presiona Enter para calcular la Escala...")

        # --- PASO 2: CALCULAR ESCALA ---
        escala = max_absoluto / 127 if max_absoluto > 0 else 1
        print(f"PASO 2: Calcular la Escala (S).")
        print(f"   - Dividimos el rango real ({max_absoluto:.4f}) entre el rango de enteros (127).")
        print(f"   - F√≥rmula: S = max_absoluto / 127")
        print(f"   - ‚úÖ Escala (S) = {escala:.6f}")
        
        # En la sim√©trica, el punto cero es siempre 0.
        punto_cero = 0
        print(f"\n   - En la cuantizaci√≥n sim√©trica, el Punto Cero (Z) siempre es 0.")
        
        pausar_y_continuar("Presiona Enter para ver la tabla de resultados finales...")

    else: # tipo == 'asimetrico'
        print("\n" + "="*60)
        print("üü¢ TUTORIAL: CUANTIZACI√ìN ASIM√âTRICA (a uint8)")
        print("="*60)
        print("Este m√©todo crea un mapa a medida para el rango exacto de tus datos.")
        
        pausar_y_continuar("Presiona Enter para encontrar el rango...")

        # --- PASO 1: CALCULAR RANGO ---
        min_real = min(lista_numeros)
        max_real = max(lista_numeros)
        print(f"PASO 1: Encontrar el valor m√≠nimo y m√°ximo exacto.")
        print(f"   - M√≠nimo real: {min_real:.4f}")
        print(f"   - M√°ximo real: {max_real:.4f}")

        pausar_y_continuar("Presiona Enter para calcular la Escala...")

        # --- PASO 2: CALCULAR ESCALA ---
        rango_real = max_real - min_real
        escala = rango_real / 255 if rango_real != 0 else 1
        print(f"PASO 2: Calcular la Escala (S).")
        print(f"   - Dividimos el tama√±o del rango real ({rango_real:.4f}) entre el de enteros (255).")
        print(f"   - F√≥rmula: S = (max_real - min_real) / 255")
        print(f"   - ‚úÖ Escala (S) = {escala:.6f}")

        pausar_y_continuar("Presiona Enter para calcular el Punto Cero...")

        # --- PASO 3: CALCULAR PUNTO CERO ---
        punto_cero = round(0 - min_real / escala) if escala != 0 else 0
        print(f"PASO 3: Calcular el Punto Cero (Z).")
        print(f"   - Este valor nos dice a qu√© entero corresponde el 0.0 del mundo real.")
        print(f"   - F√≥rmula: Z = round(0 - min_real / S)")
        print(f"   - ‚úÖ Punto Cero (Z) = {punto_cero}")

        pausar_y_continuar("Presiona Enter para ver la tabla de resultados finales...")

    # --- PASO FINAL: MOSTRAR RESULTADOS ---
    print("PASO FINAL: Aplicar las f√≥rmulas a cada n√∫mero y mostrar los resultados.")
    _imprimir_tabla_resultados(lista_numeros, escala, punto_cero, tipo)


def _imprimir_tabla_resultados(lista_numeros, escala, punto_cero, tipo):
    """Funci√≥n auxiliar para no repetir el c√≥digo de la tabla de resultados."""
    print(f"\n{'Original':>12} ‚Üí {'Cuantizado':>12} ‚Üí {'Recuperado':>12} | {'Error':>10}")
    print("-"*60)
    
    errores = []
    q_min, q_max = (-127, 127) if tipo == 'simetrico' else (0, 255)

    for num in lista_numeros:
        q = round(num / escala) + punto_cero
        q = max(q_min, min(q_max, int(q)))
        recuperado = (q - punto_cero) * escala
        error = abs(num - recuperado)
        errores.append(error)
        print(f"{num:>12.4f} ‚Üí {q:>12} ‚Üí {recuperado:>12.4f} | {error:>10.6f}")
    
    print("-"*60)
    print(f"{'Error promedio:':>47} | {sum(errores)/len(errores):>10.6f}")
    
    print(f"\n‚úÖ Resumen de ahorro:")
    print(f"   ‚Ä¢ Memoria original (float32): {len(lista_numeros) * 4} bytes")
    print(f"   ‚Ä¢ Memoria cuantizada (int8):   {len(lista_numeros)} bytes")
    print(f"   ‚Ä¢ Ahorro de memoria: 75%")

# ========== BUCLE PRINCIPAL INTERACTIVO ==========
if __name__ == "__main__":
    while True:
        print("\n" + "#"*60)
        print("###   TUTORIAL INTERACTIVO DE CUANTIZACI√ìN DE N√öMEROS   ###")
        print("#"*60)
        
        numeros = obtener_numeros_del_usuario()
        
        while True:
            print("\n¬øQu√© tipo de cuantizaci√≥n quieres ver paso a paso?")
            print("  1. Sim√©trica (ideal para datos centrados en cero)")
            print("  2. Asim√©trica (se adapta a cualquier rango de datos)")
            print("  3. Ambas (para comparar)")
            opcion = input("Elige una opci√≥n (1, 2, o 3): ").strip()

            if opcion in ['1', '2', '3']:
                break
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor, elige 1, 2, o 3.")
        
        if opcion == '1':
            cuantizar_paso_a_paso(numeros, 'simetrico')
        elif opcion == '2':
            cuantizar_paso_a_paso(numeros, 'asimetrico')
        elif opcion == '3':
            cuantizar_paso_a_paso(numeros, 'simetrico')
            cuantizar_paso_a_paso(numeros, 'asimetrico')

        # Preguntar si quiere volver a empezar
        while True:
            repetir = input("\n¬øQuieres probar con otros n√∫meros? (s/n): ").lower().strip()
            if repetir in ['s', 'n']:
                break
            else:
                print("‚ùå Opci√≥n no v√°lida. Por favor, ingresa 's' para s√≠ o 'n' para no.")
        
        if repetir == 'n':
            print("\n¬°Hasta la pr√≥xima!")
            break